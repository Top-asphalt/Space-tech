from flask import Flask, request, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///space_mood_stress.db'
db = SQLAlchemy(app)

class MoodLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    mood = db.Column(db.String(50), nullable=False)
    stress_level = db.Column(db.Integer, nullable=False)
    timestamp = db.Column(db.DateTime, default=db.func.current_timestamp())

@app.route('/')
def index():
    logs = MoodLog.query.order_by(MoodLog.timestamp.desc()).all()
    return render_template('index.html', logs=logs)

@app.route('/add', methods=['POST'])
def add_log():
    mood = request.form.get('mood')
    stress_level = request.form.get('stress_level')
    new_log = MoodLog(mood=mood, stress_level=stress_level)
    db.session.add(new_log)
    db.session.commit()
    return redirect(url_for('index'))

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)

#lighting control 

from phue import Bridge
from datetime import datetime, timedelta

BRIDGE_IP = '192.168.1.100'
bridge = Bridge(BRIDGE_IP)
bridge.connect()

def set_lights_on(lights, state=True):
    bridge.set_light(lights, 'on', state)

def set_brightness(lights, brightness):
    bridge.set_light(lights, 'bri', brightness)

def set_color(lights, hue_value):
    bridge.set_light(lights, 'hue', hue_value)

def schedule_light(light_id, on_time, off_time):
    # Placeholder for scheduling implementation
    print(f"Scheduled light {light_id} to turn on at {on_time} and off at {off_time}")

def main():
    # Example usage
    set_lights_on([1, 2], True)
    set_brightness([1, 2], 200)
    set_color([1], 50000)
    
    now = datetime.now()
    on_time = now + timedelta(minutes=1)
    off_time = now + timedelta(minutes=5)
    
    schedule_light(1, on_time, off_time)

if __name__ == '__main__':
    main()
